// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	session "github.com/hydradeny/url-shortener/auth_service/internal/service/session"
	mock "github.com/stretchr/testify/mock"
)

// SessionManager is an autogenerated mock type for the SessionManager type
type SessionManager struct {
	mock.Mock
}

type SessionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionManager) EXPECT() *SessionManager_Expecter {
	return &SessionManager_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: _a0, _a1
func (_m *SessionManager) Check(_a0 context.Context, _a1 *session.CheckSession) (*session.Session, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 *session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *session.CheckSession) (*session.Session, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *session.CheckSession) *session.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *session.CheckSession) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionManager_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type SessionManager_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *session.CheckSession
func (_e *SessionManager_Expecter) Check(_a0 interface{}, _a1 interface{}) *SessionManager_Check_Call {
	return &SessionManager_Check_Call{Call: _e.mock.On("Check", _a0, _a1)}
}

func (_c *SessionManager_Check_Call) Run(run func(_a0 context.Context, _a1 *session.CheckSession)) *SessionManager_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*session.CheckSession))
	})
	return _c
}

func (_c *SessionManager_Check_Call) Return(_a0 *session.Session, _a1 error) *SessionManager_Check_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionManager_Check_Call) RunAndReturn(run func(context.Context, *session.CheckSession) (*session.Session, error)) *SessionManager_Check_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *SessionManager) Create(_a0 context.Context, _a1 *session.CreateSession) (*session.Session, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *session.CreateSession) (*session.Session, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *session.CreateSession) *session.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *session.CreateSession) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionManager_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SessionManager_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *session.CreateSession
func (_e *SessionManager_Expecter) Create(_a0 interface{}, _a1 interface{}) *SessionManager_Create_Call {
	return &SessionManager_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *SessionManager_Create_Call) Run(run func(_a0 context.Context, _a1 *session.CreateSession)) *SessionManager_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*session.CreateSession))
	})
	return _c
}

func (_c *SessionManager_Create_Call) Return(_a0 *session.Session, _a1 error) *SessionManager_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionManager_Create_Call) RunAndReturn(run func(context.Context, *session.CreateSession) (*session.Session, error)) *SessionManager_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Destroy provides a mock function with given fields: _a0, _a1
func (_m *SessionManager) Destroy(_a0 context.Context, _a1 *session.DestroySession) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Destroy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *session.DestroySession) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionManager_Destroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Destroy'
type SessionManager_Destroy_Call struct {
	*mock.Call
}

// Destroy is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *session.DestroySession
func (_e *SessionManager_Expecter) Destroy(_a0 interface{}, _a1 interface{}) *SessionManager_Destroy_Call {
	return &SessionManager_Destroy_Call{Call: _e.mock.On("Destroy", _a0, _a1)}
}

func (_c *SessionManager_Destroy_Call) Run(run func(_a0 context.Context, _a1 *session.DestroySession)) *SessionManager_Destroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*session.DestroySession))
	})
	return _c
}

func (_c *SessionManager_Destroy_Call) Return(_a0 error) *SessionManager_Destroy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionManager_Destroy_Call) RunAndReturn(run func(context.Context, *session.DestroySession) error) *SessionManager_Destroy_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyAll provides a mock function with given fields: _a0, _a1
func (_m *SessionManager) DestroyAll(_a0 context.Context, _a1 *session.DestroyAllSession) (int, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DestroyAll")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *session.DestroyAllSession) (int, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *session.DestroyAllSession) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *session.DestroyAllSession) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionManager_DestroyAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyAll'
type SessionManager_DestroyAll_Call struct {
	*mock.Call
}

// DestroyAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *session.DestroyAllSession
func (_e *SessionManager_Expecter) DestroyAll(_a0 interface{}, _a1 interface{}) *SessionManager_DestroyAll_Call {
	return &SessionManager_DestroyAll_Call{Call: _e.mock.On("DestroyAll", _a0, _a1)}
}

func (_c *SessionManager_DestroyAll_Call) Run(run func(_a0 context.Context, _a1 *session.DestroyAllSession)) *SessionManager_DestroyAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*session.DestroyAllSession))
	})
	return _c
}

func (_c *SessionManager_DestroyAll_Call) Return(_a0 int, _a1 error) *SessionManager_DestroyAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionManager_DestroyAll_Call) RunAndReturn(run func(context.Context, *session.DestroyAllSession) (int, error)) *SessionManager_DestroyAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionManager creates a new instance of SessionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionManager {
	mock := &SessionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
